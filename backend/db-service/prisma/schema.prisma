// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Modèles d'authentification et utilisateurs
// ========================================

// Modèle Utilisateur principal
model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Pour l'authentification locale
  accounts      Account[]
  sessions      Session[]
  dashboards    Dashboard[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Modèle pour les comptes OAuth (Google, GitHub, etc.)
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modèle pour les sessions utilisateur
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle pour la vérification de l'email
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========================================
// Modèles Dashboards
// ========================================

model Dashboard {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets   DashboardWidget[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model DashboardWidget {
  id          Int       @id @default(autoincrement())
  dashboardId Int
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  type        String
  title       String
  x           Int
  y           Int
  width       Int
  height      Int
  hostId      String?
  itemId      String?
  config      Json?
}
