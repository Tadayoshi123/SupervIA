name: SupervIA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: supervia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          backend/db-service/package-lock.json
          backend/auth-service/package-lock.json
          backend/metrics-service/package-lock.json
          backend/notification-service/package-lock.json
          backend/ai-service/package-lock.json
          frontend/supervia/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend/db-service && npm install
        cd ../auth-service && npm install
        cd ../metrics-service && npm install
        cd ../notification-service && npm install
        cd ../ai-service && npm install
        cd ../../frontend/supervia && npm install
    
    # Tests désactivés temporairement (pas encore de suites de tests)
    - name: Run backend tests (disabled)
      if: ${{ false }}
      run: |
        cd backend/db-service && npm test
        cd ../auth-service && npm test
        cd ../metrics-service && npm test
        cd ../notification-service && npm test
        cd ../ai-service && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/supervia_test
        JWT_SECRET: test-secret
        INTERNAL_API_KEY: test-internal-key
    
    - name: Run frontend tests (disabled)
      if: ${{ false }}
      run: |
        cd frontend/supervia && npm test
      env:
        CI: true

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build images with Buildx Bake (cached)
      uses: docker/bake-action@v5
      with:
        files: |
          docker-compose.yml
        pull: true
        load: true
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
    
    - name: Create .env from GitHub Secrets
      run: |
        echo "# Generated by CI" > .env
        {
          echo "POSTGRES_USER=${POSTGRES_USER}";
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}";
          echo "POSTGRES_DB=${POSTGRES_DB}";
          echo "ZABBIX_DB_USER=${ZABBIX_DB_USER}";
          echo "ZABBIX_DB_PASSWORD=${ZABBIX_DB_PASSWORD}";
          echo "ZABBIX_DB_NAME=${ZABBIX_DB_NAME}";
          echo "ZABBIX_URL=http://zabbix-web:8080/api_jsonrpc.php";
          echo "ZABBIX_USER=${ZABBIX_USER}";
          echo "ZABBIX_PASSWORD=${ZABBIX_PASSWORD}";
          echo "JWT_SECRET=${JWT_SECRET}";
          echo "INTERNAL_API_KEY=${INTERNAL_API_KEY}";
          echo "DB_SERVICE_URL=http://db-service:3000";
          echo "NOTIFICATION_SERVICE_URL=http://notification-service:3000";
          echo "SMTP_HOST=${SMTP_HOST}";
          echo "SMTP_PORT=${SMTP_PORT}";
          echo "SMTP_SECURE=${SMTP_SECURE}";
          echo "SMTP_USER=${SMTP_USER}";
          echo "SMTP_PASS=${SMTP_PASS}";
          echo "SMTP_FROM_NAME=${SMTP_FROM_NAME}";
          echo "SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}";
          echo "FRONTEND_URL=http://localhost:3000";
          echo "SESSION_SECRET=${SESSION_SECRET}";
          echo "AUTH_SERVICE_URL=http://localhost:3002";
          echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}";
          echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}";
          echo "GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}";
          echo "GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}";
        } >> .env
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ZABBIX_DB_USER: ${{ secrets.ZABBIX_DB_USER }}
        ZABBIX_DB_PASSWORD: ${{ secrets.ZABBIX_DB_PASSWORD }}
        ZABBIX_DB_NAME: ${{ secrets.ZABBIX_DB_NAME }}
        ZABBIX_USER: ${{ secrets.ZABBIX_USER }}
        ZABBIX_PASSWORD: ${{ secrets.ZABBIX_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        INTERNAL_API_KEY: ${{ secrets.INTERNAL_API_KEY }}
        SMTP_HOST: ${{ secrets.SMTP_HOST }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_SECURE: ${{ secrets.SMTP_SECURE }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASS: ${{ secrets.SMTP_PASS }}
        SMTP_FROM_NAME: ${{ secrets.SMTP_FROM_NAME }}
        SMTP_FROM_EMAIL: ${{ secrets.SMTP_FROM_EMAIL }}
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        # GitHub interdit les secrets commençant par GITHUB_
        # On mappe donc des secrets GH_* vers des variables d'env GITHUB_*
        GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
        GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}

    - name: Start stack and run smoke checks
      run: |
        docker compose up -d postgres
        sleep 10
        docker compose up -d db-service
        sleep 5
        docker compose up -d auth-service metrics-service notification-service ai-service
        sleep 5
        docker compose up -d frontend
        sleep 10
        
        # Test health endpoints
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:3002/health || exit 1
        curl -f http://localhost:3003/health || exit 1
        curl -f http://localhost:3004/health || exit 1
        curl -f http://localhost:3005/health || exit 1
        
        docker compose down

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd backend/db-service && npm audit --audit-level moderate
        cd ../auth-service && npm audit --audit-level moderate
        cd ../metrics-service && npm audit --audit-level moderate
        cd ../notification-service && npm audit --audit-level moderate
        cd ../ai-service && npm audit --audit-level moderate
        cd ../../frontend/supervia && npm audit --audit-level moderate

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/supervia/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend/supervia && npm install
    
    - name: Run ESLint
      run: |
        cd frontend/supervia && npm run lint 